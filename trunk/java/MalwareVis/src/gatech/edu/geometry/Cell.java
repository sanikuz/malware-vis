package gatech.edu.geometry;
import gatech.edu.pcap.DNSStream;
import gatech.edu.pcap.Pcap;
import gatech.edu.pcap.Stream;
import gatech.edu.pcap.TCPStream;
import gatech.edu.util.Mapping;

import java.util.ArrayList;
import processing.core.*;

public class Cell {
	pt center = new pt(0,0);  
	float radius=100; 
	float leng = 60; 
	int cid = -1; 
	int num;
	Cilium[] cilium; 
	float[] stime; 
	PImage img = null; 
	String name; 
	String text; 
	String country; 
	Pcap pcap; 
	String flagDir = "data/flags/"; 
	
	public Cell(pt c){
		center.setTo(c); 
	}
	public void setRadius(float r){
		radius =r; 
	}
	public void setLeng(float l){
		leng=l; 
	}
	public void selectCilium(PApplet pa){
		float dis = 20; 
		int si = -1; 
		pt m = pt.mouse(pa); 
		for (int i=0; i<num; i++){
		     float temp = cilium[i].disTo(m); 
		     if (temp <dis){
		    	 dis = temp; 
		    	 si = i; 
		     }
		}
		cid = si; 
		if (cid >=0){
			text = cilium[cid].text; 
			String imgpath = cilium[cid].imgpath; 
			if (imgpath !=null){
				img = pa.loadImage(imgpath); 
				country = imgpath.substring(11, 13).toUpperCase(); 
			}
			else {
				img =null; 
			}
		}
	}
	public void showCilium(PApplet pa){
		for (int i=0; i<num; i++){
			if (i==cid) cilium[i].drawSelected(pa); 
			else cilium[i].draw(pa); 
		}
	}
	public void showBody(PApplet pa){
		pa.noFill();
		color.stroke(color.darkBlue, pa); 
		pa.strokeWeight(4); 
		pa.bezier(center.x, center.y+radius+leng, center.x, center.y+radius+leng/2, 
				center.x, center.y+radius,center.x-0.258f*radius, center.y+0.967f*radius
				); 
		pa.arc(center.x, center.y, radius*2, radius*2, 0.2618f+3.1416f/2, 6.021f+3.1416f/2);
		pa.fill(250,120,0); 
		pa.triangle(center.x+0.258f*radius, center.y+radius, 
				center.x+0.23f*radius, center.y+0.93f*radius,
				center.x+0.1f*radius, center.y+radius);
		pa.triangle(center.x+0.03f*radius, center.y+radius+leng, 
				center.x, center.y+0.8f*radius+leng, 
				center.x-0.03f*radius, center.y+radius+leng); 
		int offsety = (int)(radius*0.2f);  
		if (cid <0) {//show name
			pa.text(name.substring(0, 8), center.x, center.y-offsety); 
			pa.text(name.substring(8, 16), center.x, center.y );
			pa.text(name.substring(16, 24), center.x, center.y+offsety );
			pa.text(name.substring(24, 32), center.x, center.y+offsety*2);
		}
		else if (img == null){ //show text
			pa.text(text, center.x, center.y); 
		}
		else { // show img and text 
			pa.text("country: "+country, center.x-15, center.y);
			pa.image(img, center.x+30, center.y-5); 
			pa.text(text, center.x, center.y+offsety+2); 
		}
	}
	
	public void setMappingAngle(float alpha){
		 if (stime==null) return; 
		 Mapping mapping = new Mapping(stime, PConstants.PI/6, PConstants.TWO_PI-PConstants.PI/6, alpha); 
		 mapping.generateOutput(); 
		 float[] angle = mapping.getOutput(); 
		 for (int i=0 ;i<angle.length; i++ ){
			 cilium[i].computeContact(angle[i], this); 
		 }
	}
	
	public void load(Pcap input){
		if (input==null){System.out.println("load pcap failed");return;}
		System.out.println("load pcap: ");
		name = input.getDigest().getName(); 
		 ArrayList<Stream> streams = input.getStreams();
		 cilium = new Cilium[streams.size()]; 
		 num=0; 
		 double duration = input.getDuration(); 
		 stime = new float[streams.size()]; 
		 int ns=0; 
		 for (Stream s : streams) {
			 Cilium cur = cilium[num++] = new Cilium(); 
			 String text; 
			 if (s instanceof DNSStream)  {
				 text = ((DNSStream)s).getDomainName(); 
				 cur.setType(true); 
			 }
			 else if (s instanceof TCPStream) {
				 text = ((TCPStream)s).getDstIP(); 
				// String country = CountryLookup.getInstance().getCountryFromIP(text); 
				// String imgpath = flagDir +country+".gif"; 
				 cur.setType(false); 
				 //cur.setImagePath(imgpath); 
			 }
			 else {text=""; System.out.println("invalid steam");}
			 cur.setText(text); 
			 double start = s.getStartTime(); 
			 double end = s.getEndTime(); 
			// cur.computeAngleAndContact(start, end, duration, this); //linear mapping
			 stime[ns++] = (float)start; //(float)(start+end)/2.0f;  
			 cur.setSpan(start, end, this); 
			 long num = s.getNumPackets(); 
			 cur.setLeng(num, leng/10, leng); 
			 long size = s.getSize(); 
			 cur.setWidth(size, this); 
			 boolean mask = s.getFinished() & s.getFinished(); 
			 cur.setMask(mask); 
		 }
	}
}

