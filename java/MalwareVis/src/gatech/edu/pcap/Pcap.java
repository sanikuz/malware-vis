package gatech.edu.pcap;
import gatech.edu.util.*;

import org.python.util.PythonInterpreter;
import org.python.core.*;
import java.util.ArrayList;
import java.lang.StringBuilder;
import java.net.URL;


public class Pcap {

    private ArrayList<Stream> streams;
    private Digest digest; 
    private String path;
    private static PythonInterpreter interp = null;
    private static PyFunction getstreams = null;
    String pypath = System.getProperty("pypath", "lib");
    private int cluster = -1;
    private double duration = 0.0;
    public Pcap(String path) {
    	String suffix = path.substring(path.lastIndexOf('.')+1); 
    	if (suffix.equals("txt")){
    		loadFile(path); 
    	}
    	else if (suffix.equals("pcap")){
    		loadPcap(path); 
    	}
    }
    public Pcap(URL url){
    	loadFile(url); 
    }
    public Pcap(String pa, ArrayList<Stream> ss){
    	this.path = pa; 
    	streams = ss; 
    	this.duration = (this.streams.get(this.streams.size() - 1)).getEndTime();
    	generateDigest(); 
    }
    
    public void loadPcap(String pcapPath){
        if (interp == null) {
            interp = new PythonInterpreter();
            interp.exec("import sys");
            interp.exec("sys.path.append('" + pypath + "')");
            interp.exec("from pcapparser import getstreams");
            getstreams = interp.get("getstreams", PyFunction.class);
        }
       // System.out.println("okay:"+pcapPath); 
        this.path = pcapPath;
        this.streams = (ArrayList<Stream>) getstreams.__call__(new PyString(pcapPath)).__tojava__(ArrayList.class);
        if (!this.streams.isEmpty()) {
          double pcapStartTime = this.streams.get(0).getStartTime();
          this.duration = (this.streams.get(this.streams.size() - 1)).getEndTime() -
                           pcapStartTime;
          for (Stream s : this.streams)
            s.changeToOffset(pcapStartTime);
        }
        generateDigest(); 
    }
    public void saveFile(){
    	String filepath =  path+".txt"; 
    	FileWrite fw = new FileWrite(filepath); 
    	for (Stream stream: streams){
    		if (stream instanceof DNSStream){
    			DNSStream dnsstream = (DNSStream)stream; 
    			String line = dnsstream.toString();  
    			fw.writeLine(line);	
    		}
    		else if (stream instanceof TCPStream){
    			TCPStream tcpstream = (TCPStream)stream; 
    			String line= tcpstream.toString(); 
    			fw.writeLine(line); 
    		}	
    	}
    	fw.close(); 
    }
    public void loadFile(URL path){
    	streams = new ArrayList<Stream>();
    	FileRead fr= new FileRead(path); 
        String line = fr.readLine();
        while(line != null){
        	if (line.charAt(0)=='D'){
        		DNSStream stream = new DNSStream(); 
        		stream.parse(line); 
        		streams.add(stream); 
        	}
        	else if (line.charAt(0)=='T'){
        		TCPStream stream = new TCPStream(); 
        		stream.parse(line); 
        		streams.add(stream); 
        	}
        	else{
        		System.out.println("invalid input!"); 
        	}
        	line = fr.readLine(); 
        }
        fr.close();
     	this.path = path.toString();
        this.duration = (this.streams.get(this.streams.size() - 1)).getEndTime();
        generateDigest(); 
    }
    public void loadFile(String path){
    	streams = new ArrayList<Stream>();
    	FileRead fr= new FileRead(path); 
        String line = fr.readLine();
        while(line != null){
        	if (line.charAt(0)=='D'){
        		DNSStream stream = new DNSStream(); 
        		stream.parse(line); 
        		streams.add(stream); 
        	}
        	else if (line.charAt(0)=='T'){
        		TCPStream stream = new TCPStream(); 
        		stream.parse(line); 
        		streams.add(stream); 
        	}
        	else{
        		System.out.println("invalid input!"); 
        	}
        	line = fr.readLine(); 
        }
        fr.close();
     	this.path = path.substring(0, path.lastIndexOf('.')-1); 
        this.duration = (this.streams.get(this.streams.size() - 1)).getEndTime();
        generateDigest(); 
    }
    public ArrayList<Stream> getStreams() {
        return this.streams;
    }
    public Digest getDigest(){
    	return digest; 
    }
    public void generateDigest(){
    	if (streams==null || streams.isEmpty()) return; 
    	String name =path; 
    	//String name =path.substring(path.lastIndexOf('\\')+1); 
    	//String name =path.substring(path.lastIndexOf('/')+1); 
    	//name = name.substring(0, name.indexOf('.')); 
    	long totNumPackets=0; 
    	long totSize=0; 
   	 	long numStreams=streams.size(); 
   	 	long numDNSStreams=0; 
   	 	long numTCPStreams=0;
   	 	for (Stream stream: streams){
   	 		totNumPackets+=stream.getNumPackets(); 
   	 		totSize+=stream.getSize(); 
   	 		if (stream instanceof DNSStream) numDNSStreams++; 
   	 		else if (stream instanceof TCPStream) numTCPStreams++; 
   	 	}
   	 	digest = new Digest(name, totNumPackets, totSize, 
   	 			numStreams, numDNSStreams, numTCPStreams, duration); 
    }
    public ArrayList<Stream> getStreamsBeforeTime(double time) {
        return this.streams;
    }

    public ArrayList<Stream> getStreamsInRange(double startTime, double endTime) {
        return this.streams;
    }

    @Override
	public String toString() {
        StringBuilder str = new StringBuilder();
        for (Stream stream : this.streams) {
            str.append(stream.toString());
            str.append("\n");
        }
        return str.toString();
    }

    public static void main (String [] args) {
        Pcap pcap = new Pcap(args[0]);
        System.out.println(pcap.toString());
    }

    public int getCluster() {
        return cluster;
    }

    public void setCluster(int cluster) {
        this.cluster = cluster;
    }
    public double getDuration() {
        return duration;
    }

}

